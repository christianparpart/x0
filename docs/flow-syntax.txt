// This file is part of the "x0" project, http://xzero.io/
//   (c) 2009-2014 Christian Parpart <trapni@gmail.com>
//
// Licensed under the MIT License (the "License"); you may not use this
// file except in compliance with the License. You may obtain a copy of
// the License at: http://opensource.org/licenses/MIT


.: LEXICAL :.

DIGIT           ::= '0'..'9'
NUMBER          ::= 1*DIGIT

CHAR            ::= 'a' .. 'z' | 'A' .. 'Z'
IDENT           ::= CHAR *(CHAR | DIGIT | '_' | '.')

NAMED_PARAM     ::= IDENT ':'

HEX4DIGIT       ::= '0'..'9' | 'A'..'F' | 'a'..'f'

BOOL            ::= 'true' | 'false'

STRING          ::= RAW_STRING | EXT_STRING

RAW_STRING      ::= "'" <text except "'"> "'"
EXT_STRING      ::= '"' <escaped and interpolated text> '"'

REGEXP          ::= '/' <const regexp pattern> '/'

IP_ADDR         ::= IPv4_ADDR | IPv6_ADDR
IP_CIDR         ::= IPv4_CIDR | IPv6_CIDR

IPv4_ADDR       ::= IP4_OCTET '.' IP4_OCTET '.' IP4_OCTET '.' IP4_OCTET
IPv4_CIDR       ::= IPv4_ADDR '/' 1*2DIGIT

IP4_OCTET       ::= <1*3DIGIT between 0..255>

IPv6_ADDR       ::= IP6_HEXPART [':' IPv4_ADDR]
IPv6_CIDR       ::= IPv6_ADDR '/' 1*2DIGIT

IP6_HEXPART     ::= IP6_HEXSEQ
                  | IP6_HEXSEQ "::" [IP6_HEXSEQ]
                  | "::" [IP6_HEXSEQ]
IP6_HEXSEQ      ::= 1*4HEXDIGIT *(':' 1*4HEXDIGIT)

CAST_TYPE       ::= 'string' | 'int' | 'bool'

IPL_STRING      ::= '"' (interpolatedChar* '${' expr '}')* interpolatedChar* '"'
IPL_CHAR        ::= any char except '#' with escapes enabled


.: DECLARATIONS :.

goal            ::= unit

unit            ::= *importDecl *decl

importDecl      ::= 'import' importList ['from' (STRING | IDENT)] [';']

importList      ::= importItem *(',' importItem)
importItem      ::= STRING | IDENT

decl            ::= varDecl | handlerDecl

varDecl         ::= 'var' IDENT '=' expr [';']

handlerDecl     ::= 'handler' IDENT stmt


.: STATEMENTS :.

stmt            ::= ifStmt | compoundStmt | callStmt | emptyStmt

ifStmt          ::= 'if' logicExpr stmt
                  *('elsif' logicExpr stmt)
                   ['else' stmt]

matchStmt       ::= 'match' expr [REL_OP] '{' *matchCase ['else' stmt] '}'
matchCase       ::= 'on' literalExpr stmt

compoundStmt    ::= '{' *stmt '}'

callStmt        ::= IDENT ['(' paramList? ')' | paramList?] (';' | LF)

emptyStmt       ::= ';'


.: EXPRESSIONS :.

LOGIC_OP        ::= 'and' | 'or' | 'xor'

REL_OP          ::= '==' | '!='
                  | '<=' | '>=' | '<' | '>'
                  | '=^' | '=$' | '=~'
                  | 'in'
ADD_OP          ::= '+' | '-'
MUL_OP          ::= '*' | '/' | '%' | 'shl' | 'shr'
POW_OP          ::= '**'

expr            ::= logicExpr
logicExpr       ::= relExpr *(LOGIC_OP relExpr)
relExpr         ::= addExpr *(REL_OP addExpr)
addExpr         ::= mulExpr *(ADD_OP mulExpr)
mulExpr         ::= powExpr *(MUL_OP powExpr)
powExpr         ::= negExpr *(POW_OP negExpr)
negExpr         ::= *('!' | '-' | '+') primaryExpr
primaryExpr     ::= subExpr [UNIT]
subExpr         ::= literalExpr
                  | IPL_STRING
                  | symbolExpr
                  | castExpr
                  | keyValueExpr
                  | lambdaExpr
                  | compoundExpr
symbolExpr      ::= IDENT ['(' paramList? ')']
compoundExpr    ::= '(' expr ')'
lambdaExpr      ::= '{' stmt '}'
literalExpr     ::= NUMBER [UNIT]
                  | BOOL
                  | STRING
                  | IP_ADDR
                  | IP_CIDR
                  | REGEXP
castExpr        ::= CAST_TYPE '(' logicExpr ')'
paramList       ::= namedExpr *(',' namedExpr)
                  | expr *(',' expr)
namedExpr       ::= NAMED_PARAM expr

vim:et:ts=4
