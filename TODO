for a long-term todo list, see ticket system at https://github.com/xzero/x0/issues/

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0.10.0 PRE-TODO

- find a way to ppa.dep for 12.04 (x32/64)
  - create *two* PPAs:
    - trapni/x0 for main x0 (latest ubuntu)
    - trapni/x0-precise: for 12.04

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
flow:
  - add `x0d --dump-du` (dump def-use chain)
  - SSA
    - mem2reg propagation (pass manager stage: before, one-time)
    - reg2mem propagation (pass manager stage: after, one-time)
    - constant propagation (pass manager stage: main)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
accesslog:

accesslog.format id: string, format: string;
  %%        %
  %q        query
  %p        path
  %h        host
  %s        sent bytes (content body)
  %S        sent bytes on transport level
  %t        timestamp
  %T        timespan, for the total request handling
  %c        status code
  %>{name}  request header value
  %<{name}  response header value

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
flow:
  - add `x0d --dump-du` (dump def-use chain)
  - SSA
    - mem2reg propagation (pass manager stage: before, one-time)
    - reg2mem propagation (pass manager stage: after, one-time)
    - constant propagation (pass manager stage: main)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- QA:
  - [cmake] fail configure step when gnutls/gnutls.h is not present. (found on 14.04 ubuntu)
  - [director] disallow invalid POST args (currently ignored / not detected)
  - [http] remove flag IsHandlingRequest
  - [flow] how's plugin list info passed from source to vm Program ?
    - seems like the obvious way is not used (wtf?)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; HTTP connection lifecycle diagram

entry       ::= (accept* lifecycle*)*

lifecycle   ::= (readSome writeSome)* close;

accept      ::= sys_accept        ; 
                select_worker     ; select least loaded worker
                enqueue           ; enqueue client to selected worker

io          ::= handleError?
                readSome?
                writeSome?

readSome    ::= sys_read          ;
                process?          ; if there are bytes to process then parse & process request
                close?            ; if endpoint closed or fatal error occured
                wantRead?         ; if we expect more data to read

writeSome   ::= sys_write         ;
                wantWrite?        ; if we expect more data to write
                                  ; and there not more data to parse (for next request) already in the buffer

process     ::= parseFragment     ; parse http fragment
                handleRequest?    ; handle request by Flow "main" handler,
                                  ; if request headers got fully parsed

close       ::= sys_close

abort(code) ::= resp.status = code
                resp.serialize
                writeSome

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; FINDINGS:

- DOCUMENT ALL CHANGES AS WE GO!
- HttpConnection
  - process(): verify usefulness of return value (boolean), as it's not used.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- HttpConnection: try to get rid of start() method, or rename it to setup() / initialize().
- HttpConnection must get its socket at constructor time to allow setState() (etc)
  to invoke log(), as it would crash otherwise.
- http: allow the ability to set tcp_nopush / tcp_cork per request (defaults to global setting).
- director:
  - support for (runtime-configurable) multiple balancer strategies:
    - RR, RoundRobin
    - LL, LeastLoad
    - CC, Chance
    - FF, FirstFit
  - support for bucket filter to partition a cluster into multiple smaller hierarichal buckets
    - support also support the above different balancer strategies

-------------------------------------------------------------------------------------

- http:
  - BUG: proxy-request results into an endless living connection
    "GET http://blah/foo HTTP/1.1\r\n....", at: reading-request (header-name-begin)
    "refcount:1, outputState:unhandled, fd:58, timer:0, io.x0:None"
    - in local test it hang at: reading-request (lws-sp-ht-begin), but I can't reproduce again.

- website: new documentation-focusing  website
  - bring it online
  - write/migrate news(/blog) articles
  - functional download section
  - download section to provide 2 types of builds (aka. target environments / audience):
    - production - release packages with no experimental stuff in it
    - testing - packages containing potential new code to be merged into production

- commit 2775dce31b1729da6b5719d2758677424f056b9d:
  - check if we actually need it and if we should then apply it to director plugin, too.

- think about adding concurrent/noncurrent versions of some classes:
  - Counter vs ConcurrentCounter
  - Queue vs ConcurrentQueue
  - HashMap vs ConcurrentHashMap

-------------------------------------------------
   0.7.0 release todo
-------------------------------------------------

- director: suppport accelerated backend release
- ssl: properly working on real websites (also in threaded mode).
- ssl: eliminate deprecation warnings
- x0d: ensure basic binary upgrade and config reloads.

-----------------------------------------------------------------------------
   runtime configuration file reloading
-----------------------------------------------------------------------------

1. compiles new version of the config file at fixed path
2. increments configurationGeneration number
3. applies incremental differences with setup handler
   - gracefully handle errors to ensure safe serving of requests (still threaded)
*. remove settings that were not touched within setup handler stage
4. replaces main request handler with the new one
5. releases resources from last compilation

-----------------------------------------------------------------------------
   Misc.
-----------------------------------------------------------------------------

- HttpMessageProcessor:
  - (FIXME) should not forward the Transfer-Encoding header when it already decodes the response body.
  - update proxy plugins to not care about this one (plugins: proxy, fastcgi, director)

- http/x0d:
  - move Flow dependencies out of XzeroHttp into x0d directly,
    like configuration file handling etc, as this is tied to x0d anyways.
    Doing so enables us to use XzeroHttp module without Flow in external projects
    that don't need it (the `Desaster Job Queue Manager` for example).
- core: design generic key/value store API
  - C++ API
  - Flow API
  - plugins:
    - malloc
    - redis
    - memcached
- ssl: support different session cache stores:
  - malloc, memcached, ...
- HA: implement feature to load balance backends, to obsolete haproxy infront of x0d.
  - handler: `balancer.manager` to generate balancer manager/status page (`/haproxy/?stats` equivalent)

===================================================================================================

0.4:

- ssl: counter BEAST attack by allowing the user to specify cipher priorities and 
	provide a secure default priority list.
	- http://www.g-loaded.eu/2011/09/27/mod_gnutls-rc4-cipher-beast/
- ssl: add configure option to enable/disable SSL renegotiation (counter CVE)
	- http://www.thc.org/thc-ssl-dos/
- resource management (at least for max_core_size) must be evaluated *after* privilege dropping,
  in case there is some, or they're lost.
- pool allocator for contexts: [server, worker, connection, request]
  - the allocated memory should be released on destruction, but
    could be passed to the upper layer for later reuse.
    e.g. the request memory pool passes its data up to the connection pool, so the next request
    can make use of it w/o invoking malloc()/new/etc, and so forth.

- introduce a specialized speed-optimized String class with an API like BufferRef/Buffer
  - including formatted string building and using external pool-allocator

-----------------------------------------------------------------------------
QUALITY ASSURANCE TODO:
-----------------------------------------------------------------------------
- encapsulate ev::timer into an x0::timer (inline) to ease switching backends (e.g. to asio)
- colorize (optional) help print output
- RESPECT: handle request headers "Keep-Alive" properly (using [deadline-]timers)
- rfc_date-cache (Last-Modified, Date) i can't do simple caching of last active unix-time as the 
  last-modified field shards this, i should use a cache<time_t, std::string> of configurable max-cost value.
  (NOTE: why did I say that? why does mtime shard the server's "Date:"?)
- [minor] replace std::function<>-style hooks with a more performant solution:
  - at least for content generator (virtual method)
  - second: all hooks involved in request processing (function-member pointers, or virtual method?)
  - optional: remaining configure-time hooks.


-----------------------------------------------------------------------------
CODE CLEANUP TODO:
-----------------------------------------------------------------------------
- [minor] error management (std::error_code and bool+logger)
- eliminate the need of File and use just FileSource instead.
- XxxFilter -> XxxEncoder
- process: termination handler, some kind of hook that is invoked when the application is terminated (with whatever signal or not).
- reduce number of syscalls during a single request-processing

-----------------------------------------------------------------------------
FEATURES TODO:
-----------------------------------------------------------------------------
* core: when a new connection comes in but we have already reached the
  connection limit (as per config) then kill some idle connections in 
  keep-alive state.
  if there are no keep-alive connections available, drop connection immediately.
  this eliminates the need of MaxKeepAliveRequests cvar.
- [minor] x0d: add settings option to setup process' cpu affinity
- proper protocol "Upgrade"-API, as required for web sockets
- add integrity-checks for lazy programmers to check object healthy:
  - If response Content-Length was given: do not write more bytes than expected to.
  - Do not modify response headers/state once serialization has been initiated.
- debug plugin: config settings for different debug prints
  - per connection performance timer
  - per request performance timer
  - request/response header dumps
- request path rewriting (rewrite)
- server status API (status)
- lua server pages (wsapi)
- c++ server pages (csp) via llvm/clang (compiled in)
- webdav support (webdav)
- SSI (server side includes) plugin.


-----------------------------------------------------------------------------
NOTES AND THOUGHTS:
-----------------------------------------------------------------------------

- should the upcoming (lua driven) template engine be part of x0 core?
  (we'll have more sources than just error documents being generated from templates, that is plugins like: dirlisting.

-----------------------------------------------------------------------------
OPTIMIZATION AND CACHING INITIATIVE
-----------------------------------------------------------------------------

- core optimizations:
  - ...
- improve configuration system
  - dir contexts hierarichally via ternary_search<>


vim:ts=2:sw=2:et
