# test to validate the code generation of expressions
# vim:syntax=flow

var foo = 'foo';
var bar = 'bar';
var foobar = 'foobar';

handler test_expr_number_units
{
	# verify bit units
	assert 8 bit == 1 byte;
	assert 1 kbit == 1024 bit;
	assert 1 mbit == 1024 kbit;
	assert 1 gbit == 1024 mbit;
	assert 1 tbit == 1024 gbit;

	# verify bit byte units
	assert 1 byte == 1;
	assert 1 kbyte == 1024 byte;
	assert 1 mbyte == 1024 kbyte;
	assert 1 gbyte == 1024 mbyte;
	assert 1 tbyte == 1024 gbyte;

	# verify time units
	assert 1 sec == 1;
	assert 1 min == 60 sec;
	assert 1 hour == 60 min;
	assert 1 day == 24 hours;
	assert 1 week == 7 days;
	assert 1 month == 30 days;
	assert 1 year == 365 days;
}

handler test_expr_not
{
    assert not false;
    assert not not true;
    assert not ( not true );
}

handler test_operator_precedence
{
    assert not true == false;
    assert 2 + 3 * 4 == 14;
    assert 2 * 3 ** 2 == 18;
    assert ((2 * 3) ** 2 == 36);
}

handler test_expr_and
{
	assert true and true;
	assert not (true and false);
	assert not (false and true);
}

handler test_expr_or
{
	# (number, number)
	assert ((false or true)  == true);
	assert ((true  or false) == true);
	assert ((true  or true)  == true);
	assert ((false or false) == false);
}

handler test_expr_to_bool
{
	assert bool(1);
	assert bool( (-1) );
	assert not 0;

	assert not '';

	assert "Hello, Literal!"; # FIXME eval
	assert foo; # FIXME: eval
}

handler test_expr_xor
{
	assert true xor false;
	assert false xor true;
	assert not (true xor true);
	assert not (false xor false);
}

handler test_expr_equal
{
	# (string, int)
	assert not foobar == 5, 'foobar == 5';
	assert foobar == 6, 'foobar == 6';
	assert not foobar == 7, 'foobar == 7';

	# (string, string)
	assert foobar == foobar, 'foobar == foobar';
	assert not foobar == bar, 'not foobar == bar';
}

handler test_expr_unequal
{
	# (string, int)
	assert foobar != 5;
	assert not (foobar != 6);
#	assert not foobar != 6; FIXME bad LLVM IR (same as above but w/o braces)

	# (string, string)
	assert foobar != bar;
	assert not (foobar != foobar);
	assert not foobar != foobar; # FIXME: assert fails, due to operator priorities; "not" should be lower than equality
}

handler test_expr_lessequ
{
	# (string, int)
#	assert not foobar <= 5;
	assert foobar <= 6;
	assert foobar <= 7;

	# (string, string)
	assert bar <= foo;
	assert foo <= foo;
	assert foo <= foobar;
	assert not foobar <= foo;
	assert not (foo <= bar);
	assert not (foo <= bar); # FIXME wrong operator procedence
}
/*
handler test_expr_greaterequ
{
    var foo = "foo";
    var bar = "bar";
    var foobar = "foobar";

    # (string, int)
    assert foobar >= 5, 'foobar >= 5';
    assert foobar >= 6, 'foobar >= 6';
    assert not foobar >= 7, 'foobar >= 7';

    # (string, string)
    assert foo >= bar, 'foo >= bar';
    assert foo >= foo, 'foo >= foo';
    assert foobar >= foo, 'foobar >= foo';
    assert not bar >= foo, 'not bar >= foo';
    assert not foo >= foobar, 'not foo >= foobar';
}

handler test_expr_less
{
    var foo = "foo";
    var bar = "bar";
    var foobar = "foobar";

    # (string, int)
    assert not foobar < 5, 'foobar < 5';
    assert not foobar < 6, 'foobar < 6';
    assert foobar < 7, 'foobar < 7';

    # (string, string)
    assert bar < foo, 'bar < foo';
    assert not foo < bar, 'not foo < bar';
}

handler test_expr_greater
{
    var foo = "foo";
    var bar = "bar";
    var foobar = "foobar";

    # (string, int)
    assert foobar > 5, 'foobar > 5';
    assert not foobar > 6, 'foobar > 6';
    assert not foobar > 7, 'foobar > 7';

    # (string, string)
    assert foo > bar, 'foo > bar';
    assert not bar > foo, 'not bar > foo';
}

handler test_expr_prefix_match
{
    var foo = "foo";
    var bar = "bar";
    var foobar = "foobar";

	# (string, string)
	assert foobar =^ foo, 'foobar =^ foo';
	assert foobar =^ foobar, 'foobar =^ foobar';
	assert not foobar =^ bar, 'not foobar =^ bar';
}

handler test_expr_suffix_match
{
    var foo = "foo";
    var bar = "bar";
    var foobar = "foobar";

    # (string, string)
    assert foobar =$ bar, 'foobar =$ bar';
    assert foobar =$ foobar, 'foobar =$ foobar';
    assert not foobar =$ foo, 'not foobar =$ foo';
    assert not bar =$ foobar, 'not bar =$ foobar';
}

handler test_expr_in
{
    var foo = "foo";
    var bar = "bar";
    var foobar = "foobar";

	# (string, string)
	assert foo in foobar;
	assert foobar in foobar;
	assert not foobar in foo;

	# (ip, cidr)
	assert 10.26.91.1 in 10.26.91.0/24;
	assert fe80::2001:7 in fe80::/64;
	assert not 2001::1 in fe80::/64;

	# (cidr, cidr)
	assert 10.0.0.0/19 in 10.0.0.0/8;
	assert fe80::/16 in fe80::/64;
	assert not fe80:fe90::/16 in fe80::/64;
}

handler test_expr_plus
{
	# (string, string)
	assert foo + bar == foobar, 'foo + bar';

	assert mkbuf(foobar) + 3 == bar, 'mkbuf(foobar) + 3 == bar';
	assert mkbuf(foobar) - 3 == bar, 'mkbuf(foobar) - 3 == bar';
}

handler test_expr_minus
{
	# TODO
}

handler test_expr_mul
{
    assert 3 * 4 == 12;
}

handler test_expr_div
{
	# TODO
}

handler test_expr_pow
{
    # (number, number)
    assert 2 ** 0 == 1;
    assert 2 ** 1 == 2;
    assert 2 ** 2 == 4;
    assert 2 ** 3 == 8;

    # ensure non-associativety rule
    assert 2 ** 3 ** 4 == 2417851639229258349412352;
    assert 2 ** (3 ** 4) == 2417851639229258349412352;
    assert (2 ** 3) ** 4 == 4096;
}

/*
handler test_array
{
	var a = [1, 2, 4, 8];
	var b = [3, 5, 7, 9];
	var c = [0, 3, 5];
	var d = [];

	# equality
	assert a == a, "a == b";
	assert a != b, "a != b";

	assert !!a, "!!a";
	assert !d, "!d";

	# plus
	assert a + c == (1, 2, 4, 8, 0, 3, 5), "a + c";
	assert c + a == (0, 3, 5, 1, 2, 4, 8), "c + a";
}

handler ok {}
handler fail { assert false, "fail"; }

handler test_post_condstmt
{
    ok if true;
    fail if false;

    assert true, "if true" if true;
    assert false, "if false" if false;

    assert (true, "if true") if true;
    assert (false, "if false") if false;
}
*/
